
--
--  package body apq.mysql.Client.option_system is
--
--     function "="( Left :root_option_record; right : root_option_record) return boolean
--     is
--     begin
--        if left.especie /= Right.especie then
--  	 return false;
--        end if;
--        if left.especie = none then
--  	 return true;
--        end if;
--        if left.especie = ssl then
--  	 return ( left.key_ssl = right.key_ssl ) ;
--        end if;
--        if left.especie = common then
--  	 return ( left.key_common = right.key_common );
--        end if;
--
--        raise Program_Error; -- if have more especies of key, added here the logic :-)
--        return false; -- stub
--     end "=";
--
--     procedure key_nameval( L : in out options_list.list ;
--  			 val : root_option_record;
--  			 clear : boolean := false
--  			)
--     is
--        use options_list;
--        mi_cursor : options_list.cursor := no_element;
--     begin
--        if clear then
--  	 if not ( L.is_empty ) then
--  	    L.clear;
--  	 end if;
--        end if;
--        if L.is_empty then
--  	 L.append(val);
--  	 return;
--        end if;
--        mi_cursor := L.find(val);
--        if mi_cursor = No_Element then
--  	 L.append(val);
--  	 return;
--        end if;
--        L.replace_element(mi_cursor, val);
--
--     end key_nameval;
--
--     procedure add_key_nameval( C : in out Connection_Type;
--  			     kname : ssl_enum ;
--  			     kval : string ;
--  			     clear : boolean := false)
--     is
--     begin
--        if kname = none then
--  	 return;
--        end if;
--        declare
--  	 val_record : root_option_record :=
--  	   root_option_record'(
--  			especie => ssl,
--  			is_valid => true,
--  			value_nature => nat_ptr_char,
--  			key_ssl => kname,
--  			key_common => none,
--  			value_s => ada.Strings.Unbounded.To_Unbounded_String(kval),
--  			value_u => 0,
--  			value_b => false
--  		       );
--        begin
--  	 key_nameval(
--  	      L     => c.keyname_val_cache_ssl,
--  	      val   => val_record,
--  	      clear => clear );
--
--        end;
--     end add_key_nameval;
--     --
--     procedure add_key_nameval( C : in out Connection_Type;
--  			     kname : apq.mysql.common_enum;
--  			     kval : string ;
--  			     clear : boolean := false)
--     is
--     begin
--        if kname = none then
--  	 return;
--        end if;
--        declare
--  	 val_record : root_option_record :=
--  	   root_option_record'(
--  			especie => common ,
--  			is_valid => true,
--  			value_nature => nat_ptr_char,
--  			key_ssl => none ,
--  			key_common => kname,
--  			value_s => ada.Strings.Unbounded.To_Unbounded_String(kval),
--  			value_u => 0,
--  			value_b => false
--  		       );
--        begin
--  	 key_nameval(
--  	      L     => c.keyname_val_cache_common,
--  	      val   => val_record,
--  	      clear => clear );
--
--        end;
--     end add_key_nameval;
--
--     procedure add_key_nameval( C : in out Connection_Type;
--  			     kname : apq.mysql.common_enum;
--  			     kval :  Unsigned_Integer ;
--  			     kval_nature :  nature_enum_type := nature_enum_type'(nat_uint);
--  			     -- nat_uint or nat_ptr_ui
--  			     clear : boolean := false)
--     is
--        kval_tmp : Unsigned_Integer := 1;
--     begin
--        if kname = none then
--  	 return;
--        end if;
--        if not( kval_nature = nat_uint or kval_nature = nat_ptr_ui ) then
--  	 return;
--        end if;
--        if kval_nature = nat_ptr_ui then
--  	 if kval = 0 then
--  	    kval_tmp := 0;
--  	 end if;
--        else
--  	 kval_tmp := kval;
--        end if;
--
--        declare
--  	 val_record : root_option_record :=
--  	   root_option_record'(
--  			especie => common ,
--  			is_valid => true,
--  			value_nature => kval_nature,
--  			key_ssl => none ,
--  			key_common => kname,
--  			value_s => ada.Strings.Unbounded.To_Unbounded_String(""),
--  			value_u => kval_tmp,
--  			value_b => false
--  		       );
--        begin
--  	 key_nameval(
--  	      L     => c.keyname_val_cache_common,
--  	      val   => val_record,
--  	      clear => clear );
--
--        end;
--     end add_key_nameval;
--
--     procedure add_key_nameval( C : in out Connection_Type;
--  			     kname : apq.mysql.common_enum;
--  			     clear : boolean := false)
--     is
--     begin
--        if kname = none then
--  	 return;
--        end if;
--        declare
--  	 val_record : root_option_record :=
--  	   root_option_record'(
--  			especie => common ,
--  			is_valid => true,
--  			value_nature => nat_not_used,
--  			key_ssl => none ,
--  			key_common => kname,
--  			value_s => ada.Strings.Unbounded.To_Unbounded_String(""),
--  			value_u => 0,
--  			value_b => false
--  		       );
--        begin
--  	 key_nameval(
--  	      L     => c.keyname_val_cache_common,
--  	      val   => val_record,
--  	      clear => clear );
--
--        end;
--     end add_key_nameval;
--
--     procedure add_key_nameval( C : in out Connection_Type;
--  			     kname : apq.mysql.common_enum;
--  			     kval :  boolean ;
--  			     clear : boolean := false)
--     is
--     begin
--        if kname = none then
--  	 return;
--        end if;
--        declare
--  	 val_record : root_option_record :=
--  	   root_option_record'(
--  			especie => common ,
--  			is_valid => true,
--  			value_nature => nat_ptr_my_bool,
--  			key_ssl => none ,
--  			key_common => kname,
--  			value_s => ada.Strings.Unbounded.To_Unbounded_String(""),
--  			value_u => 0,
--  			value_b => kval
--  		       );
--        begin
--  	 key_nameval(
--  	      L     => c.keyname_val_cache_common,
--  	      val   => val_record,
--  	      clear => clear );
--
--        end;
--     end add_key_nameval;
--
--  end apq.mysql.client.option_system;
